#!/usr/bin/env python3
"""
Simple Master Summary Test using database function
"""

import asyncio
import os
import sys

# Load environment variables
from dotenv import load_dotenv
load_dotenv()

sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'backend'))

from database import db_client

async def test_database_function():
    """Test using the database function to create master summaries"""
    
    user_id = 'customer-robert-004'  # Robert Brown's string user_id
    
    print(f"🧪 Testing database function approach")
    print(f"👤 User: {user_id}")
    
    # Check current state
    current = db_client.client.table('user_master_summaries').select('*').eq('user_id', user_id).execute()
    print(f"📊 Current master summaries: {len(current.data)}")
    
    # Try to call the database function using RPC
    try:
        print(f"🚀 Calling get_or_create_user_master_summary function...")
        
        result = db_client.client.rpc('get_or_create_user_master_summary', {
            'target_user_id': user_id
        }).execute()
        
        print(f"📡 Function result: {result}")
        
        if result.data:
            print(f"✅ Function returned data: {result.data[0] if isinstance(result.data, list) else result.data}")
        
        # Check if summary was created
        after = db_client.client.table('user_master_summaries').select('*').eq('user_id', user_id).execute()
        print(f"📈 Master summaries after: {len(after.data)}")
        
        if after.data:
            summary = after.data[0]
            print(f"📋 Summary details:")
            print(f"   - Length: {len(summary['master_summary'])} chars")
            print(f"   - Created: {summary.get('created_at')}")
            print(f"   - Total conversations: {summary.get('total_conversations', 0)}")
            print(f"   - Total messages: {summary.get('total_messages', 0)}")
            
            return True
        else:
            print(f"❌ No master summary created")
            return False
            
    except Exception as e:
        print(f"❌ Error calling database function: {e}")
        return False

async def test_simple_insert():
    """Test simple insert without complex data"""
    
    user_id = 'customer-robert-004'
    
    print(f"\n🧪 Testing simple insert")
    try:
        # First delete any existing records
        db_client.client.table('user_master_summaries').delete().eq('user_id', user_id).execute()
        
        # Get actual conversation IDs using UUID format (conversations use UUID, not string user_id)
        uuid_user_id = '550e8400-e29b-41d4-a716-446655440004'
        convs = db_client.client.table('conversations').select('id').eq('user_id', uuid_user_id).limit(2).execute()
        conv_ids = [conv['id'] for conv in convs.data] if convs.data else []
        
        # Simple insert with minimal data
        result = db_client.client.table('user_master_summaries').insert({
            'user_id': user_id,
            'master_summary': 'Test summary generated by automation',
            'total_conversations': 1,
            'total_messages': 10,
            'key_insights': ['Test insight 1', 'Test insight 2'],
            'conversations_included': conv_ids
        }).execute()
        
        if result.data:
            print(f"✅ Simple insert successful")
            summary = result.data[0]
            print(f"   - ID: {summary.get('id')}")
            print(f"   - Summary: {summary.get('master_summary')}")
            print(f"   - Conversations: {summary.get('total_conversations')}")
            print(f"   - Messages: {summary.get('total_messages')}")
            return True
        else:
            print(f"❌ Simple insert failed - no data returned")
            return False
            
    except Exception as e:
        print(f"❌ Simple insert error: {e}")
        return False

async def main():
    print(f"🚀 SIMPLE MASTER SUMMARY TESTS")
    print(f"=" * 40)
    
    # Test 1: Database function
    func_result = await test_database_function()
    
    # Test 2: Simple insert
    insert_result = await test_simple_insert()
    
    print(f"\n📋 RESULTS")
    print(f"   Database function: {'✅' if func_result else '❌'}")
    print(f"   Simple insert: {'✅' if insert_result else '❌'}")
    
    if func_result or insert_result:
        print(f"\n🎉 At least one method worked!")
        return 0
    else:
        print(f"\n❌ All methods failed")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code) 